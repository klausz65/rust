# Automatically run `cargo update` periodically

---
name: Bump dependencies in Cargo.lock
on:
  schedule:
    # Run weekly
    - cron: '0 0 * * Sun'
  workflow_dispatch:
    # Needed so we can run it manually
permissions:
  contents: read
defaults:
  run:
    shell: bash
env:
  # So cargo doesn't complain about unstable features
  RUSTC_BOOTSTRAP: 1

jobs:
  update:
    if: github.repository_owner == 'rust-lang'
    name: update dependencies
    runs-on: ubuntu-latest
    outputs:
      lockfile_names: ${{ steps.update_script.outputs.lockfile_names }}
      skip_keys: ${{ steps.check_status.outputs.skip_keys }}
    steps:
      - name: checkout the source code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: install the bootstrap toolchain
        run: |
          # Extract the stage0 version
          toolchain=$(awk -F= '{a[$1]=$2} END {print(a["compiler_version"] "-" a["compiler_date"])}' src/stage0)
          # Install and set as default
          rustup toolchain install --no-self-update --profile minimal "$toolchain"
          rustup default "$toolchain"

      - name: run update script
        id: update_script
        run: |
          # Update all lockfiles
          ./src/ci/scripts/update-all-lockfiles.py --run-update
          # Make a list of which lockfiles were updated for future use
          lockfile_names="$(./src/ci/scripts/update-all-lockfiles.py --print-names)"
          echo "lockfile_names=$lockfile_names" >> "$GITHUB_OUTPUT"

      - name: upload output file
        uses: actions/upload-artifact@v4
        with:
          name: update-output
          path: update_output.json
          retention-days: 1

      - name: check for S-waiting-on-bors
        id: check_status
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Build a json array of items to skip
          skip_keys="$(./src/ci/scripts/update-all-lockfiles.py --list-skip-branches)"
          echo "skip_keys=$skip_keys" >> "$GITHUB_OUTPUT"

  pr:
    name: create or update PR
    needs: [update]
    strategy:
      fail-fast: false
      matrix:
        name: ${{ fromJson(needs.update.outputs.lockfile_names) }}
    # Don't run the job for a branch if we don't need to make a PR (because there is
    # already one in the queue).
    if: >
      github.repository_owner == 'rust-lang' && 
      !contains(fromJSON(needs.update.outputs.skip_keys), matrix.name)
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: checkout the source code
        uses: actions/checkout@v4

      - name: download output file from update job
        uses: actions/download-artifact@v4
        with:
          name: update-output

      - name: craft PR body and commit message
        run: |
          ./src/ci/scripts/update-all-lockfiles.py --prepare-pr-files "${{ matrix.name }}"
          # Set some environment variables for later use from the JSON file
          echo "BRANCH=$(jq -r '.${{ matrix.name }}.branch' update_output.json)" >> "$GITHUB_OUTPUT"
          echo "PR_TITLE=$(jq -r '.${{ matrix.name }}.pr_title' update_output.json)" >> "$GITHUB_OUTPUT"

      - name: commit
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git switch --force-create "$BRANCH"
          # Add only the relevant lockfile
          ./src/ci/scripts/update-all-lockfiles.py --restore-lockfile "${{ matrix.name }}"
          git add "$(jq -r '.${{ matrix.name }}.lockfile_path' update_output.json)"
          git commit --no-verify --file=commit.txt

      - name: push
        run: git push --no-verify --force --set-upstream origin "$BRANCH"

      - name: edit existing open pull request
        id: edit
        # Don't fail job if we need to open new PR
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Exit with error if PR is closed
          state=$(gh pr view "$BRANCH" --repo "$GITHUB_REPOSITORY" --json state --jq '.state')
          if [[ "$state" != "OPEN" ]]; then
            exit 1
          fi

          gh pr edit "$BRANCH" --title "$PR_TITLE" --body-file pr_body.md --repo "$GITHUB_REPOSITORY"

      - name: open new pull request
        # Only run if there wasn't an existing PR
        if: steps.edit.outcome != 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh pr create --title "$PR_TITLE" --body-file pr_body.md --repo "$GITHUB_REPOSITORY"
